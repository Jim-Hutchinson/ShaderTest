#version 430 core

in vec2 fragmentTextureCoordinate;
uniform sampler2D framebuffer;
uniform vec2 resolution;

out vec4 finalColor;

float gaussian(float x, float sigma) {
    return exp(-(x * x) / (2.0 * sigma * sigma));
}

void main() {
    vec2 texelSize = 1.0 / resolution;
    vec3 centerColor = texture(framebuffer, fragmentTextureCoordinate).rgb;
    
    float sigmaS = 2.0;  // Spatial sigma
    float sigmaR = 0.1;  // Range (color) sigma

    vec3 sum = vec3(0.0);
    float weightSum = 0.0;
    
    // 5x5 kernel neighborhood
    for (int i = -2; i <= 2; i++) {
        for (int j = -2; j <= 2; j++) {
            vec2 offset = vec2(float(i), float(j)) * texelSize;
            vec3 sampleColor = texture(framebuffer, fragmentTextureCoordinate + offset).rgb;
            
            float spatialWeight = gaussian(length(vec2(i, j)), sigmaS);
            float rangeWeight = gaussian(length(sampleColor - centerColor), sigmaR);
            float weight = spatialWeight * rangeWeight;
            
            sum += sampleColor * weight;
            weightSum += weight;
        }
    }
    
    finalColor = vec4(sum / weightSum, 1.0);
}