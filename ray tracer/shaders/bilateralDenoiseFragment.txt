#version 430 core

in vec2 fragmentTextureCoordinate;
uniform sampler2D framebuffer;
uniform vec2 resolution;

out vec4 finalColor;

float gaussian(float x, float sigma) {
    return exp(-(x * x) / (2.0 * sigma * sigma));
}

float luma(vec3 color) {
    return dot(color, vec3(0.299, 0.587, 0.114));
}

void main() {
    vec2 texelSize = 1.0 / resolution;
    vec3 centerColor = texture(framebuffer, fragmentTextureCoordinate).rgb;
    
    // Adjusted sigma values
    float sigmaS = 0.5;  // Smaller spatial sigma
    float sigmaR = 0.05; // Slightly larger range sigma

    vec3 sum = centerColor; // Initialize with center pixel
    float weightSum = 1.0;  // Start with center weight
    
    // Use a 5x5 kernel to enhance denoising quality
    for (int i = -2; i <= 2; i++) {
        for (int j = -2; j <= 2; j++) {
            // Skip the center pixel since it's already included
            if(i == 0 && j == 0)
                continue;
                
            vec2 offset = vec2(float(i), float(j)) * texelSize;
            vec3 sampleColor = texture(framebuffer, fragmentTextureCoordinate + offset).rgb;
            
            float spatialWeight = gaussian(length(vec2(i, j)), sigmaS);
            float rangeWeight = gaussian(abs(luma(sampleColor) - luma(centerColor)), sigmaR);
            float weight = spatialWeight * rangeWeight;
            
            sum += sampleColor * weight;
            weightSum += weight;
        }
    }
    
    finalColor = vec4(sum / weightSum, 1.0);
}