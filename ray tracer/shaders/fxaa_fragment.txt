#version 430 core

in vec2 fragmentTextureCoordinate;
uniform sampler2D framebuffer;
out vec4 finalColor;

// Helper function to calculate luminance
float luminance(vec3 color) {
    return dot(color, vec3(0.299, 0.587, 0.114));  // Standard luminance formula
}

void main() {
    vec2 texelSize = 1.0 / textureSize(framebuffer, 0);
    vec3 color = texture(framebuffer, fragmentTextureCoordinate).rgb;

    // Sample neighboring pixels
    vec3 north = texture(framebuffer, fragmentTextureCoordinate + vec2(0.0, texelSize.y)).rgb;
    vec3 south = texture(framebuffer, fragmentTextureCoordinate - vec2(0.0, texelSize.y)).rgb;
    vec3 east = texture(framebuffer, fragmentTextureCoordinate + vec2(texelSize.x, 0.0)).rgb;
    vec3 west = texture(framebuffer, fragmentTextureCoordinate - vec2(texelSize.x, 0.0)).rgb;

    // Calculate luminance for edge detection
    float lumCenter = luminance(color);
    float lumNorth = luminance(north);
    float lumSouth = luminance(south);
    float lumEast = luminance(east);
    float lumWest = luminance(west);

    // Edge detection using luminance differences
    float edge = abs(lumNorth + lumSouth + lumEast + lumWest - 4.0 * lumCenter);

    // Reduce noise in lit areas by scaling edge detection based on luminance
    float luminanceFactor = smoothstep(0.2, 0.8, lumCenter);  // Scale based on brightness
    edge *= mix(2.0, 0.5, luminanceFactor);  // Reduce amplification in brighter areas

    // Smooth edge strength
    float edgeStrength = smoothstep(0.05, 0.5, edge);  // Adjust thresholds for sensitivity

    // Blend the edges with the original color
    vec3 blendedColor = mix(color, color - vec3(edge) * edgeStrength, 0.5);  // Adjust blend factor

    finalColor = vec4(blendedColor, 1.0);
}


// Debug version that highlights affected pixels
// Uncomment this version and comment other version to visualize affected pixels
/*
void main() {
    vec2 texelSize = 1.0 / textureSize(framebuffer, 0);
    vec3 color = texture(framebuffer, fragmentTextureCoordinate).rgb;

    // Sample neighboring pixels
    vec3 north = texture(framebuffer, fragmentTextureCoordinate + vec2(0.0, texelSize.y)).rgb;
    vec3 south = texture(framebuffer, fragmentTextureCoordinate - vec2(0.0, texelSize.y)).rgb;
    vec3 east = texture(framebuffer, fragmentTextureCoordinate + vec2(texelSize.x, 0.0)).rgb;
    vec3 west = texture(framebuffer, fragmentTextureCoordinate - vec2(texelSize.x, 0.0)).rgb;

    // Calculate luminance for edge detection
    float lumCenter = luminance(color);
    float lumNorth = luminance(north);
    float lumSouth = luminance(south);
    float lumEast = luminance(east);
    float lumWest = luminance(west);

    // Edge detection using luminance differences
    float edge = abs(lumNorth + lumSouth + lumEast + lumWest - 4.0 * lumCenter);

    // Reduce noise in lit areas by scaling edge detection based on luminance
    float luminanceFactor = smoothstep(0.2, 0.8, lumCenter);  // Scale based on brightness
    edge *= mix(2.0, 0.5, luminanceFactor);  // Reduce amplification in brighter areas

    // Smooth edge strength
    float edgeStrength = smoothstep(0.05, 0.5, edge);  // Adjust thresholds for sensitivity

    // Blend the edges with the original color
    vec3 blendedColor = mix(color, color - vec3(edge) * edgeStrength, 0.5);  // Adjust blend factor

    // Debug: Highlight affected pixels
    if (edgeStrength > 0.0) {
        finalColor = vec4(1.0, 0.0, 0.0, 1.0);  // Red for affected pixels
    } else {
        finalColor = vec4(color, 1.0);  // Original color for unaffected pixels
    }
}
*/